{"ast":null,"code":"import { CRS } from './CRS';\nimport * as Util from '../../core/Util';\n\n/*\n * @namespace CRS\n * @crs L.CRS.Earth\n *\n * Serves as the base for CRS that are global such that they cover the earth.\n * Can only be used as the base for other CRS and cannot be used directly,\n * since it does not have a `code`, `projection` or `transformation`. `distance()` returns\n * meters.\n */\n\nexport var Earth = Util.extend({}, CRS, {\n  wrapLng: [-180, 180],\n  // Mean Earth Radius, as recommended for use by\n  // the International Union of Geodesy and Geophysics,\n  // see https://rosettacode.org/wiki/Haversine_formula\n  R: 6371000,\n  // distance between two geographical points using spherical law of cosines approximation\n  distance: function (latlng1, latlng2) {\n    var rad = Math.PI / 180,\n      lat1 = latlng1.lat * rad,\n      lat2 = latlng2.lat * rad,\n      sinDLat = Math.sin((latlng2.lat - latlng1.lat) * rad / 2),\n      sinDLon = Math.sin((latlng2.lng - latlng1.lng) * rad / 2),\n      a = sinDLat * sinDLat + Math.cos(lat1) * Math.cos(lat2) * sinDLon * sinDLon,\n      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return this.R * c;\n  }\n});","map":{"version":3,"names":["CRS","Util","Earth","extend","wrapLng","R","distance","latlng1","latlng2","rad","Math","PI","lat1","lat","lat2","sinDLat","sin","sinDLon","lng","a","cos","c","atan2","sqrt"],"sources":["C:/Users/aless/OneDrive/√Årea de Trabalho/Registro Ponto front-end GitHub/ReactProjects/my-app/node_modules/leaflet/src/geo/crs/CRS.Earth.js"],"sourcesContent":["import {CRS} from './CRS';\nimport * as Util from '../../core/Util';\n\n/*\n * @namespace CRS\n * @crs L.CRS.Earth\n *\n * Serves as the base for CRS that are global such that they cover the earth.\n * Can only be used as the base for other CRS and cannot be used directly,\n * since it does not have a `code`, `projection` or `transformation`. `distance()` returns\n * meters.\n */\n\nexport var Earth = Util.extend({}, CRS, {\n\twrapLng: [-180, 180],\n\n\t// Mean Earth Radius, as recommended for use by\n\t// the International Union of Geodesy and Geophysics,\n\t// see https://rosettacode.org/wiki/Haversine_formula\n\tR: 6371000,\n\n\t// distance between two geographical points using spherical law of cosines approximation\n\tdistance: function (latlng1, latlng2) {\n\t\tvar rad = Math.PI / 180,\n\t\t    lat1 = latlng1.lat * rad,\n\t\t    lat2 = latlng2.lat * rad,\n\t\t    sinDLat = Math.sin((latlng2.lat - latlng1.lat) * rad / 2),\n\t\t    sinDLon = Math.sin((latlng2.lng - latlng1.lng) * rad / 2),\n\t\t    a = sinDLat * sinDLat + Math.cos(lat1) * Math.cos(lat2) * sinDLon * sinDLon,\n\t\t    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\treturn this.R * c;\n\t}\n});\n"],"mappings":"AAAA,SAAQA,GAAG,QAAO,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,iBAAiB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,KAAK,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEH,GAAG,EAAE;EACvCI,OAAO,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;EAEpB;EACA;EACA;EACAC,CAAC,EAAE,OAAO;EAEV;EACAC,QAAQ,EAAE,UAAUC,OAAO,EAAEC,OAAO,EAAE;IACrC,IAAIC,GAAG,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;MACnBC,IAAI,GAAGL,OAAO,CAACM,GAAG,GAAGJ,GAAG;MACxBK,IAAI,GAAGN,OAAO,CAACK,GAAG,GAAGJ,GAAG;MACxBM,OAAO,GAAGL,IAAI,CAACM,GAAG,CAAC,CAACR,OAAO,CAACK,GAAG,GAAGN,OAAO,CAACM,GAAG,IAAIJ,GAAG,GAAG,CAAC,CAAC;MACzDQ,OAAO,GAAGP,IAAI,CAACM,GAAG,CAAC,CAACR,OAAO,CAACU,GAAG,GAAGX,OAAO,CAACW,GAAG,IAAIT,GAAG,GAAG,CAAC,CAAC;MACzDU,CAAC,GAAGJ,OAAO,GAAGA,OAAO,GAAGL,IAAI,CAACU,GAAG,CAACR,IAAI,CAAC,GAAGF,IAAI,CAACU,GAAG,CAACN,IAAI,CAAC,GAAGG,OAAO,GAAGA,OAAO;MAC3EI,CAAC,GAAG,CAAC,GAAGX,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACa,IAAI,CAACJ,CAAC,CAAC,EAAET,IAAI,CAACa,IAAI,CAAC,CAAC,GAAGJ,CAAC,CAAC,CAAC;IACtD,OAAO,IAAI,CAACd,CAAC,GAAGgB,CAAC;EAClB;AACD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}