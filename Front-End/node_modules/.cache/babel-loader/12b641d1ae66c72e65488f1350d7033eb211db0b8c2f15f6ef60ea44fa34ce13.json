{"ast":null,"code":"import { Evented } from '../core/Events';\nimport { Map } from '../map/Map';\nimport * as Util from '../core/Util';\n\n/*\n * @class Layer\n * @inherits Evented\n * @aka L.Layer\n * @aka ILayer\n *\n * A set of methods from the Layer base class that all Leaflet layers use.\n * Inherits all methods, options and events from `L.Evented`.\n *\n * @example\n *\n * ```js\n * var layer = L.marker(latlng).addTo(map);\n * layer.addTo(map);\n * layer.remove();\n * ```\n *\n * @event add: Event\n * Fired after the layer is added to a map\n *\n * @event remove: Event\n * Fired after the layer is removed from a map\n */\n\nexport var Layer = Evented.extend({\n  // Classes extending `L.Layer` will inherit the following options:\n  options: {\n    // @option pane: String = 'overlayPane'\n    // By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.\n    pane: 'overlayPane',\n    // @option attribution: String = null\n    // String to be shown in the attribution control, e.g. \"© OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.\n    attribution: null,\n    bubblingMouseEvents: true\n  },\n  /* @section\n   * Classes extending `L.Layer` will inherit the following methods:\n   *\n   * @method addTo(map: Map|LayerGroup): this\n   * Adds the layer to the given map or layer group.\n   */\n  addTo: function (map) {\n    map.addLayer(this);\n    return this;\n  },\n  // @method remove: this\n  // Removes the layer from the map it is currently active on.\n  remove: function () {\n    return this.removeFrom(this._map || this._mapToAdd);\n  },\n  // @method removeFrom(map: Map): this\n  // Removes the layer from the given map\n  //\n  // @alternative\n  // @method removeFrom(group: LayerGroup): this\n  // Removes the layer from the given `LayerGroup`\n  removeFrom: function (obj) {\n    if (obj) {\n      obj.removeLayer(this);\n    }\n    return this;\n  },\n  // @method getPane(name? : String): HTMLElement\n  // Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.\n  getPane: function (name) {\n    return this._map.getPane(name ? this.options[name] || name : this.options.pane);\n  },\n  addInteractiveTarget: function (targetEl) {\n    this._map._targets[Util.stamp(targetEl)] = this;\n    return this;\n  },\n  removeInteractiveTarget: function (targetEl) {\n    delete this._map._targets[Util.stamp(targetEl)];\n    return this;\n  },\n  // @method getAttribution: String\n  // Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).\n  getAttribution: function () {\n    return this.options.attribution;\n  },\n  _layerAdd: function (e) {\n    var map = e.target;\n\n    // check in case layer gets added and then removed before the map is ready\n    if (!map.hasLayer(this)) {\n      return;\n    }\n    this._map = map;\n    this._zoomAnimated = map._zoomAnimated;\n    if (this.getEvents) {\n      var events = this.getEvents();\n      map.on(events, this);\n      this.once('remove', function () {\n        map.off(events, this);\n      }, this);\n    }\n    this.onAdd(map);\n    this.fire('add');\n    map.fire('layeradd', {\n      layer: this\n    });\n  }\n});\n\n/* @section Extension methods\n * @uninheritable\n *\n * Every layer should extend from `L.Layer` and (re-)implement the following methods.\n *\n * @method onAdd(map: Map): this\n * Should contain code that creates DOM elements for the layer, adds them to `map panes` where they should belong and puts listeners on relevant map events. Called on [`map.addLayer(layer)`](#map-addlayer).\n *\n * @method onRemove(map: Map): this\n * Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in [`onAdd`](#layer-onadd). Called on [`map.removeLayer(layer)`](#map-removelayer).\n *\n * @method getEvents(): Object\n * This optional method should return an object like `{ viewreset: this._reset }` for [`addEventListener`](#evented-addeventlistener). The event handlers in this object will be automatically added and removed from the map with your layer.\n *\n * @method getAttribution(): String\n * This optional method should return a string containing HTML to be shown on the `Attribution control` whenever the layer is visible.\n *\n * @method beforeAdd(map: Map): this\n * Optional method. Called on [`map.addLayer(layer)`](#map-addlayer), before the layer is added to the map, before events are initialized, without waiting until the map is in a usable state. Use for early initialization only.\n */\n\n/* @namespace Map\n * @section Layer events\n *\n * @event layeradd: LayerEvent\n * Fired when a new layer is added to the map.\n *\n * @event layerremove: LayerEvent\n * Fired when some layer is removed from the map\n *\n * @section Methods for Layers and Controls\n */\nMap.include({\n  // @method addLayer(layer: Layer): this\n  // Adds the given layer to the map\n  addLayer: function (layer) {\n    if (!layer._layerAdd) {\n      throw new Error('The provided object is not a Layer.');\n    }\n    var id = Util.stamp(layer);\n    if (this._layers[id]) {\n      return this;\n    }\n    this._layers[id] = layer;\n    layer._mapToAdd = this;\n    if (layer.beforeAdd) {\n      layer.beforeAdd(this);\n    }\n    this.whenReady(layer._layerAdd, layer);\n    return this;\n  },\n  // @method removeLayer(layer: Layer): this\n  // Removes the given layer from the map.\n  removeLayer: function (layer) {\n    var id = Util.stamp(layer);\n    if (!this._layers[id]) {\n      return this;\n    }\n    if (this._loaded) {\n      layer.onRemove(this);\n    }\n    delete this._layers[id];\n    if (this._loaded) {\n      this.fire('layerremove', {\n        layer: layer\n      });\n      layer.fire('remove');\n    }\n    layer._map = layer._mapToAdd = null;\n    return this;\n  },\n  // @method hasLayer(layer: Layer): Boolean\n  // Returns `true` if the given layer is currently added to the map\n  hasLayer: function (layer) {\n    return Util.stamp(layer) in this._layers;\n  },\n  /* @method eachLayer(fn: Function, context?: Object): this\n   * Iterates over the layers of the map, optionally specifying context of the iterator function.\n   * ```\n   * map.eachLayer(function(layer){\n   *     layer.bindPopup('Hello');\n   * });\n   * ```\n   */\n  eachLayer: function (method, context) {\n    for (var i in this._layers) {\n      method.call(context, this._layers[i]);\n    }\n    return this;\n  },\n  _addLayers: function (layers) {\n    layers = layers ? Util.isArray(layers) ? layers : [layers] : [];\n    for (var i = 0, len = layers.length; i < len; i++) {\n      this.addLayer(layers[i]);\n    }\n  },\n  _addZoomLimit: function (layer) {\n    if (!isNaN(layer.options.maxZoom) || !isNaN(layer.options.minZoom)) {\n      this._zoomBoundLayers[Util.stamp(layer)] = layer;\n      this._updateZoomLevels();\n    }\n  },\n  _removeZoomLimit: function (layer) {\n    var id = Util.stamp(layer);\n    if (this._zoomBoundLayers[id]) {\n      delete this._zoomBoundLayers[id];\n      this._updateZoomLevels();\n    }\n  },\n  _updateZoomLevels: function () {\n    var minZoom = Infinity,\n      maxZoom = -Infinity,\n      oldZoomSpan = this._getZoomSpan();\n    for (var i in this._zoomBoundLayers) {\n      var options = this._zoomBoundLayers[i].options;\n      minZoom = options.minZoom === undefined ? minZoom : Math.min(minZoom, options.minZoom);\n      maxZoom = options.maxZoom === undefined ? maxZoom : Math.max(maxZoom, options.maxZoom);\n    }\n    this._layersMaxZoom = maxZoom === -Infinity ? undefined : maxZoom;\n    this._layersMinZoom = minZoom === Infinity ? undefined : minZoom;\n\n    // @section Map state change events\n    // @event zoomlevelschange: Event\n    // Fired when the number of zoomlevels on the map is changed due\n    // to adding or removing a layer.\n    if (oldZoomSpan !== this._getZoomSpan()) {\n      this.fire('zoomlevelschange');\n    }\n    if (this.options.maxZoom === undefined && this._layersMaxZoom && this.getZoom() > this._layersMaxZoom) {\n      this.setZoom(this._layersMaxZoom);\n    }\n    if (this.options.minZoom === undefined && this._layersMinZoom && this.getZoom() < this._layersMinZoom) {\n      this.setZoom(this._layersMinZoom);\n    }\n  }\n});","map":{"version":3,"names":["Evented","Map","Util","Layer","extend","options","pane","attribution","bubblingMouseEvents","addTo","map","addLayer","remove","removeFrom","_map","_mapToAdd","obj","removeLayer","getPane","name","addInteractiveTarget","targetEl","_targets","stamp","removeInteractiveTarget","getAttribution","_layerAdd","e","target","hasLayer","_zoomAnimated","getEvents","events","on","once","off","onAdd","fire","layer","include","Error","id","_layers","beforeAdd","whenReady","_loaded","onRemove","eachLayer","method","context","i","call","_addLayers","layers","isArray","len","length","_addZoomLimit","isNaN","maxZoom","minZoom","_zoomBoundLayers","_updateZoomLevels","_removeZoomLimit","Infinity","oldZoomSpan","_getZoomSpan","undefined","Math","min","max","_layersMaxZoom","_layersMinZoom","getZoom","setZoom"],"sources":["C:/Users/aless/OneDrive/Área de Trabalho/Registro Ponto front-end GitHub/ReactProjects/my-app/node_modules/leaflet/src/layer/Layer.js"],"sourcesContent":["import {Evented} from '../core/Events';\nimport {Map} from '../map/Map';\nimport * as Util from '../core/Util';\n\n/*\n * @class Layer\n * @inherits Evented\n * @aka L.Layer\n * @aka ILayer\n *\n * A set of methods from the Layer base class that all Leaflet layers use.\n * Inherits all methods, options and events from `L.Evented`.\n *\n * @example\n *\n * ```js\n * var layer = L.marker(latlng).addTo(map);\n * layer.addTo(map);\n * layer.remove();\n * ```\n *\n * @event add: Event\n * Fired after the layer is added to a map\n *\n * @event remove: Event\n * Fired after the layer is removed from a map\n */\n\n\nexport var Layer = Evented.extend({\n\n\t// Classes extending `L.Layer` will inherit the following options:\n\toptions: {\n\t\t// @option pane: String = 'overlayPane'\n\t\t// By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.\n\t\tpane: 'overlayPane',\n\n\t\t// @option attribution: String = null\n\t\t// String to be shown in the attribution control, e.g. \"© OpenStreetMap contributors\". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.\n\t\tattribution: null,\n\n\t\tbubblingMouseEvents: true\n\t},\n\n\t/* @section\n\t * Classes extending `L.Layer` will inherit the following methods:\n\t *\n\t * @method addTo(map: Map|LayerGroup): this\n\t * Adds the layer to the given map or layer group.\n\t */\n\taddTo: function (map) {\n\t\tmap.addLayer(this);\n\t\treturn this;\n\t},\n\n\t// @method remove: this\n\t// Removes the layer from the map it is currently active on.\n\tremove: function () {\n\t\treturn this.removeFrom(this._map || this._mapToAdd);\n\t},\n\n\t// @method removeFrom(map: Map): this\n\t// Removes the layer from the given map\n\t//\n\t// @alternative\n\t// @method removeFrom(group: LayerGroup): this\n\t// Removes the layer from the given `LayerGroup`\n\tremoveFrom: function (obj) {\n\t\tif (obj) {\n\t\t\tobj.removeLayer(this);\n\t\t}\n\t\treturn this;\n\t},\n\n\t// @method getPane(name? : String): HTMLElement\n\t// Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.\n\tgetPane: function (name) {\n\t\treturn this._map.getPane(name ? (this.options[name] || name) : this.options.pane);\n\t},\n\n\taddInteractiveTarget: function (targetEl) {\n\t\tthis._map._targets[Util.stamp(targetEl)] = this;\n\t\treturn this;\n\t},\n\n\tremoveInteractiveTarget: function (targetEl) {\n\t\tdelete this._map._targets[Util.stamp(targetEl)];\n\t\treturn this;\n\t},\n\n\t// @method getAttribution: String\n\t// Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).\n\tgetAttribution: function () {\n\t\treturn this.options.attribution;\n\t},\n\n\t_layerAdd: function (e) {\n\t\tvar map = e.target;\n\n\t\t// check in case layer gets added and then removed before the map is ready\n\t\tif (!map.hasLayer(this)) { return; }\n\n\t\tthis._map = map;\n\t\tthis._zoomAnimated = map._zoomAnimated;\n\n\t\tif (this.getEvents) {\n\t\t\tvar events = this.getEvents();\n\t\t\tmap.on(events, this);\n\t\t\tthis.once('remove', function () {\n\t\t\t\tmap.off(events, this);\n\t\t\t}, this);\n\t\t}\n\n\t\tthis.onAdd(map);\n\n\t\tthis.fire('add');\n\t\tmap.fire('layeradd', {layer: this});\n\t}\n});\n\n/* @section Extension methods\n * @uninheritable\n *\n * Every layer should extend from `L.Layer` and (re-)implement the following methods.\n *\n * @method onAdd(map: Map): this\n * Should contain code that creates DOM elements for the layer, adds them to `map panes` where they should belong and puts listeners on relevant map events. Called on [`map.addLayer(layer)`](#map-addlayer).\n *\n * @method onRemove(map: Map): this\n * Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in [`onAdd`](#layer-onadd). Called on [`map.removeLayer(layer)`](#map-removelayer).\n *\n * @method getEvents(): Object\n * This optional method should return an object like `{ viewreset: this._reset }` for [`addEventListener`](#evented-addeventlistener). The event handlers in this object will be automatically added and removed from the map with your layer.\n *\n * @method getAttribution(): String\n * This optional method should return a string containing HTML to be shown on the `Attribution control` whenever the layer is visible.\n *\n * @method beforeAdd(map: Map): this\n * Optional method. Called on [`map.addLayer(layer)`](#map-addlayer), before the layer is added to the map, before events are initialized, without waiting until the map is in a usable state. Use for early initialization only.\n */\n\n\n/* @namespace Map\n * @section Layer events\n *\n * @event layeradd: LayerEvent\n * Fired when a new layer is added to the map.\n *\n * @event layerremove: LayerEvent\n * Fired when some layer is removed from the map\n *\n * @section Methods for Layers and Controls\n */\nMap.include({\n\t// @method addLayer(layer: Layer): this\n\t// Adds the given layer to the map\n\taddLayer: function (layer) {\n\t\tif (!layer._layerAdd) {\n\t\t\tthrow new Error('The provided object is not a Layer.');\n\t\t}\n\n\t\tvar id = Util.stamp(layer);\n\t\tif (this._layers[id]) { return this; }\n\t\tthis._layers[id] = layer;\n\n\t\tlayer._mapToAdd = this;\n\n\t\tif (layer.beforeAdd) {\n\t\t\tlayer.beforeAdd(this);\n\t\t}\n\n\t\tthis.whenReady(layer._layerAdd, layer);\n\n\t\treturn this;\n\t},\n\n\t// @method removeLayer(layer: Layer): this\n\t// Removes the given layer from the map.\n\tremoveLayer: function (layer) {\n\t\tvar id = Util.stamp(layer);\n\n\t\tif (!this._layers[id]) { return this; }\n\n\t\tif (this._loaded) {\n\t\t\tlayer.onRemove(this);\n\t\t}\n\n\t\tdelete this._layers[id];\n\n\t\tif (this._loaded) {\n\t\t\tthis.fire('layerremove', {layer: layer});\n\t\t\tlayer.fire('remove');\n\t\t}\n\n\t\tlayer._map = layer._mapToAdd = null;\n\n\t\treturn this;\n\t},\n\n\t// @method hasLayer(layer: Layer): Boolean\n\t// Returns `true` if the given layer is currently added to the map\n\thasLayer: function (layer) {\n\t\treturn Util.stamp(layer) in this._layers;\n\t},\n\n\t/* @method eachLayer(fn: Function, context?: Object): this\n\t * Iterates over the layers of the map, optionally specifying context of the iterator function.\n\t * ```\n\t * map.eachLayer(function(layer){\n\t *     layer.bindPopup('Hello');\n\t * });\n\t * ```\n\t */\n\teachLayer: function (method, context) {\n\t\tfor (var i in this._layers) {\n\t\t\tmethod.call(context, this._layers[i]);\n\t\t}\n\t\treturn this;\n\t},\n\n\t_addLayers: function (layers) {\n\t\tlayers = layers ? (Util.isArray(layers) ? layers : [layers]) : [];\n\n\t\tfor (var i = 0, len = layers.length; i < len; i++) {\n\t\t\tthis.addLayer(layers[i]);\n\t\t}\n\t},\n\n\t_addZoomLimit: function (layer) {\n\t\tif (!isNaN(layer.options.maxZoom) || !isNaN(layer.options.minZoom)) {\n\t\t\tthis._zoomBoundLayers[Util.stamp(layer)] = layer;\n\t\t\tthis._updateZoomLevels();\n\t\t}\n\t},\n\n\t_removeZoomLimit: function (layer) {\n\t\tvar id = Util.stamp(layer);\n\n\t\tif (this._zoomBoundLayers[id]) {\n\t\t\tdelete this._zoomBoundLayers[id];\n\t\t\tthis._updateZoomLevels();\n\t\t}\n\t},\n\n\t_updateZoomLevels: function () {\n\t\tvar minZoom = Infinity,\n\t\t    maxZoom = -Infinity,\n\t\t    oldZoomSpan = this._getZoomSpan();\n\n\t\tfor (var i in this._zoomBoundLayers) {\n\t\t\tvar options = this._zoomBoundLayers[i].options;\n\n\t\t\tminZoom = options.minZoom === undefined ? minZoom : Math.min(minZoom, options.minZoom);\n\t\t\tmaxZoom = options.maxZoom === undefined ? maxZoom : Math.max(maxZoom, options.maxZoom);\n\t\t}\n\n\t\tthis._layersMaxZoom = maxZoom === -Infinity ? undefined : maxZoom;\n\t\tthis._layersMinZoom = minZoom === Infinity ? undefined : minZoom;\n\n\t\t// @section Map state change events\n\t\t// @event zoomlevelschange: Event\n\t\t// Fired when the number of zoomlevels on the map is changed due\n\t\t// to adding or removing a layer.\n\t\tif (oldZoomSpan !== this._getZoomSpan()) {\n\t\t\tthis.fire('zoomlevelschange');\n\t\t}\n\n\t\tif (this.options.maxZoom === undefined && this._layersMaxZoom && this.getZoom() > this._layersMaxZoom) {\n\t\t\tthis.setZoom(this._layersMaxZoom);\n\t\t}\n\t\tif (this.options.minZoom === undefined && this._layersMinZoom && this.getZoom() < this._layersMinZoom) {\n\t\t\tthis.setZoom(this._layersMinZoom);\n\t\t}\n\t}\n});\n"],"mappings":"AAAA,SAAQA,OAAO,QAAO,gBAAgB;AACtC,SAAQC,GAAG,QAAO,YAAY;AAC9B,OAAO,KAAKC,IAAI,MAAM,cAAc;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,IAAIC,KAAK,GAAGH,OAAO,CAACI,MAAM,CAAC;EAEjC;EACAC,OAAO,EAAE;IACR;IACA;IACAC,IAAI,EAAE,aAAa;IAEnB;IACA;IACAC,WAAW,EAAE,IAAI;IAEjBC,mBAAmB,EAAE;EACtB,CAAC;EAED;AACD;AACA;AACA;AACA;AACA;EACCC,KAAK,EAAE,UAAUC,GAAG,EAAE;IACrBA,GAAG,CAACC,QAAQ,CAAC,IAAI,CAAC;IAClB,OAAO,IAAI;EACZ,CAAC;EAED;EACA;EACAC,MAAM,EAAE,YAAY;IACnB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAI,CAACC,IAAI,IAAI,IAAI,CAACC,SAAS,CAAC;EACpD,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACAF,UAAU,EAAE,UAAUG,GAAG,EAAE;IAC1B,IAAIA,GAAG,EAAE;MACRA,GAAG,CAACC,WAAW,CAAC,IAAI,CAAC;IACtB;IACA,OAAO,IAAI;EACZ,CAAC;EAED;EACA;EACAC,OAAO,EAAE,UAAUC,IAAI,EAAE;IACxB,OAAO,IAAI,CAACL,IAAI,CAACI,OAAO,CAACC,IAAI,GAAI,IAAI,CAACd,OAAO,CAACc,IAAI,CAAC,IAAIA,IAAI,GAAI,IAAI,CAACd,OAAO,CAACC,IAAI,CAAC;EAClF,CAAC;EAEDc,oBAAoB,EAAE,UAAUC,QAAQ,EAAE;IACzC,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAACpB,IAAI,CAACqB,KAAK,CAACF,QAAQ,CAAC,CAAC,GAAG,IAAI;IAC/C,OAAO,IAAI;EACZ,CAAC;EAEDG,uBAAuB,EAAE,UAAUH,QAAQ,EAAE;IAC5C,OAAO,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAACpB,IAAI,CAACqB,KAAK,CAACF,QAAQ,CAAC,CAAC;IAC/C,OAAO,IAAI;EACZ,CAAC;EAED;EACA;EACAI,cAAc,EAAE,YAAY;IAC3B,OAAO,IAAI,CAACpB,OAAO,CAACE,WAAW;EAChC,CAAC;EAEDmB,SAAS,EAAE,UAAUC,CAAC,EAAE;IACvB,IAAIjB,GAAG,GAAGiB,CAAC,CAACC,MAAM;;IAElB;IACA,IAAI,CAAClB,GAAG,CAACmB,QAAQ,CAAC,IAAI,CAAC,EAAE;MAAE;IAAQ;IAEnC,IAAI,CAACf,IAAI,GAAGJ,GAAG;IACf,IAAI,CAACoB,aAAa,GAAGpB,GAAG,CAACoB,aAAa;IAEtC,IAAI,IAAI,CAACC,SAAS,EAAE;MACnB,IAAIC,MAAM,GAAG,IAAI,CAACD,SAAS,EAAE;MAC7BrB,GAAG,CAACuB,EAAE,CAACD,MAAM,EAAE,IAAI,CAAC;MACpB,IAAI,CAACE,IAAI,CAAC,QAAQ,EAAE,YAAY;QAC/BxB,GAAG,CAACyB,GAAG,CAACH,MAAM,EAAE,IAAI,CAAC;MACtB,CAAC,EAAE,IAAI,CAAC;IACT;IAEA,IAAI,CAACI,KAAK,CAAC1B,GAAG,CAAC;IAEf,IAAI,CAAC2B,IAAI,CAAC,KAAK,CAAC;IAChB3B,GAAG,CAAC2B,IAAI,CAAC,UAAU,EAAE;MAACC,KAAK,EAAE;IAAI,CAAC,CAAC;EACpC;AACD,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArC,GAAG,CAACsC,OAAO,CAAC;EACX;EACA;EACA5B,QAAQ,EAAE,UAAU2B,KAAK,EAAE;IAC1B,IAAI,CAACA,KAAK,CAACZ,SAAS,EAAE;MACrB,MAAM,IAAIc,KAAK,CAAC,qCAAqC,CAAC;IACvD;IAEA,IAAIC,EAAE,GAAGvC,IAAI,CAACqB,KAAK,CAACe,KAAK,CAAC;IAC1B,IAAI,IAAI,CAACI,OAAO,CAACD,EAAE,CAAC,EAAE;MAAE,OAAO,IAAI;IAAE;IACrC,IAAI,CAACC,OAAO,CAACD,EAAE,CAAC,GAAGH,KAAK;IAExBA,KAAK,CAACvB,SAAS,GAAG,IAAI;IAEtB,IAAIuB,KAAK,CAACK,SAAS,EAAE;MACpBL,KAAK,CAACK,SAAS,CAAC,IAAI,CAAC;IACtB;IAEA,IAAI,CAACC,SAAS,CAACN,KAAK,CAACZ,SAAS,EAAEY,KAAK,CAAC;IAEtC,OAAO,IAAI;EACZ,CAAC;EAED;EACA;EACArB,WAAW,EAAE,UAAUqB,KAAK,EAAE;IAC7B,IAAIG,EAAE,GAAGvC,IAAI,CAACqB,KAAK,CAACe,KAAK,CAAC;IAE1B,IAAI,CAAC,IAAI,CAACI,OAAO,CAACD,EAAE,CAAC,EAAE;MAAE,OAAO,IAAI;IAAE;IAEtC,IAAI,IAAI,CAACI,OAAO,EAAE;MACjBP,KAAK,CAACQ,QAAQ,CAAC,IAAI,CAAC;IACrB;IAEA,OAAO,IAAI,CAACJ,OAAO,CAACD,EAAE,CAAC;IAEvB,IAAI,IAAI,CAACI,OAAO,EAAE;MACjB,IAAI,CAACR,IAAI,CAAC,aAAa,EAAE;QAACC,KAAK,EAAEA;MAAK,CAAC,CAAC;MACxCA,KAAK,CAACD,IAAI,CAAC,QAAQ,CAAC;IACrB;IAEAC,KAAK,CAACxB,IAAI,GAAGwB,KAAK,CAACvB,SAAS,GAAG,IAAI;IAEnC,OAAO,IAAI;EACZ,CAAC;EAED;EACA;EACAc,QAAQ,EAAE,UAAUS,KAAK,EAAE;IAC1B,OAAOpC,IAAI,CAACqB,KAAK,CAACe,KAAK,CAAC,IAAI,IAAI,CAACI,OAAO;EACzC,CAAC;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,SAAS,EAAE,UAAUC,MAAM,EAAEC,OAAO,EAAE;IACrC,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACR,OAAO,EAAE;MAC3BM,MAAM,CAACG,IAAI,CAACF,OAAO,EAAE,IAAI,CAACP,OAAO,CAACQ,CAAC,CAAC,CAAC;IACtC;IACA,OAAO,IAAI;EACZ,CAAC;EAEDE,UAAU,EAAE,UAAUC,MAAM,EAAE;IAC7BA,MAAM,GAAGA,MAAM,GAAInD,IAAI,CAACoD,OAAO,CAACD,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE;IAEjE,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEK,GAAG,GAAGF,MAAM,CAACG,MAAM,EAAEN,CAAC,GAAGK,GAAG,EAAEL,CAAC,EAAE,EAAE;MAClD,IAAI,CAACvC,QAAQ,CAAC0C,MAAM,CAACH,CAAC,CAAC,CAAC;IACzB;EACD,CAAC;EAEDO,aAAa,EAAE,UAAUnB,KAAK,EAAE;IAC/B,IAAI,CAACoB,KAAK,CAACpB,KAAK,CAACjC,OAAO,CAACsD,OAAO,CAAC,IAAI,CAACD,KAAK,CAACpB,KAAK,CAACjC,OAAO,CAACuD,OAAO,CAAC,EAAE;MACnE,IAAI,CAACC,gBAAgB,CAAC3D,IAAI,CAACqB,KAAK,CAACe,KAAK,CAAC,CAAC,GAAGA,KAAK;MAChD,IAAI,CAACwB,iBAAiB,EAAE;IACzB;EACD,CAAC;EAEDC,gBAAgB,EAAE,UAAUzB,KAAK,EAAE;IAClC,IAAIG,EAAE,GAAGvC,IAAI,CAACqB,KAAK,CAACe,KAAK,CAAC;IAE1B,IAAI,IAAI,CAACuB,gBAAgB,CAACpB,EAAE,CAAC,EAAE;MAC9B,OAAO,IAAI,CAACoB,gBAAgB,CAACpB,EAAE,CAAC;MAChC,IAAI,CAACqB,iBAAiB,EAAE;IACzB;EACD,CAAC;EAEDA,iBAAiB,EAAE,YAAY;IAC9B,IAAIF,OAAO,GAAGI,QAAQ;MAClBL,OAAO,GAAG,CAACK,QAAQ;MACnBC,WAAW,GAAG,IAAI,CAACC,YAAY,EAAE;IAErC,KAAK,IAAIhB,CAAC,IAAI,IAAI,CAACW,gBAAgB,EAAE;MACpC,IAAIxD,OAAO,GAAG,IAAI,CAACwD,gBAAgB,CAACX,CAAC,CAAC,CAAC7C,OAAO;MAE9CuD,OAAO,GAAGvD,OAAO,CAACuD,OAAO,KAAKO,SAAS,GAAGP,OAAO,GAAGQ,IAAI,CAACC,GAAG,CAACT,OAAO,EAAEvD,OAAO,CAACuD,OAAO,CAAC;MACtFD,OAAO,GAAGtD,OAAO,CAACsD,OAAO,KAAKQ,SAAS,GAAGR,OAAO,GAAGS,IAAI,CAACE,GAAG,CAACX,OAAO,EAAEtD,OAAO,CAACsD,OAAO,CAAC;IACvF;IAEA,IAAI,CAACY,cAAc,GAAGZ,OAAO,KAAK,CAACK,QAAQ,GAAGG,SAAS,GAAGR,OAAO;IACjE,IAAI,CAACa,cAAc,GAAGZ,OAAO,KAAKI,QAAQ,GAAGG,SAAS,GAAGP,OAAO;;IAEhE;IACA;IACA;IACA;IACA,IAAIK,WAAW,KAAK,IAAI,CAACC,YAAY,EAAE,EAAE;MACxC,IAAI,CAAC7B,IAAI,CAAC,kBAAkB,CAAC;IAC9B;IAEA,IAAI,IAAI,CAAChC,OAAO,CAACsD,OAAO,KAAKQ,SAAS,IAAI,IAAI,CAACI,cAAc,IAAI,IAAI,CAACE,OAAO,EAAE,GAAG,IAAI,CAACF,cAAc,EAAE;MACtG,IAAI,CAACG,OAAO,CAAC,IAAI,CAACH,cAAc,CAAC;IAClC;IACA,IAAI,IAAI,CAAClE,OAAO,CAACuD,OAAO,KAAKO,SAAS,IAAI,IAAI,CAACK,cAAc,IAAI,IAAI,CAACC,OAAO,EAAE,GAAG,IAAI,CAACD,cAAc,EAAE;MACtG,IAAI,CAACE,OAAO,CAAC,IAAI,CAACF,cAAc,CAAC;IAClC;EACD;AACD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}