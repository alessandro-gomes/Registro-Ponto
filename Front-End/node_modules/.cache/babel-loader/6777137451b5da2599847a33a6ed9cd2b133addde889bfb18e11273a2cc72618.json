{"ast":null,"code":"import * as Util from '../core/Util';\nimport { Earth } from './crs/CRS.Earth';\nimport { toLatLngBounds } from './LatLngBounds';\n\n/* @class LatLng\r\n * @aka L.LatLng\r\n *\r\n * Represents a geographical point with a certain latitude and longitude.\r\n *\r\n * @example\r\n *\r\n * ```\r\n * var latlng = L.latLng(50.5, 30.5);\r\n * ```\r\n *\r\n * All Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:\r\n *\r\n * ```\r\n * map.panTo([50, 30]);\r\n * map.panTo({lon: 30, lat: 50});\r\n * map.panTo({lat: 50, lng: 30});\r\n * map.panTo(L.latLng(50, 30));\r\n * ```\r\n *\r\n * Note that `LatLng` does not inherit from Leaflet's `Class` object,\r\n * which means new classes can't inherit from it, and new methods\r\n * can't be added to it with the `include` function.\r\n */\n\nexport function LatLng(lat, lng, alt) {\n  if (isNaN(lat) || isNaN(lng)) {\n    throw new Error('Invalid LatLng object: (' + lat + ', ' + lng + ')');\n  }\n\n  // @property lat: Number\n  // Latitude in degrees\n  this.lat = +lat;\n\n  // @property lng: Number\n  // Longitude in degrees\n  this.lng = +lng;\n\n  // @property alt: Number\n  // Altitude in meters (optional)\n  if (alt !== undefined) {\n    this.alt = +alt;\n  }\n}\nLatLng.prototype = {\n  // @method equals(otherLatLng: LatLng, maxMargin?: Number): Boolean\n  // Returns `true` if the given `LatLng` point is at the same position (within a small margin of error). The margin of error can be overridden by setting `maxMargin` to a small number.\n  equals: function (obj, maxMargin) {\n    if (!obj) {\n      return false;\n    }\n    obj = toLatLng(obj);\n    var margin = Math.max(Math.abs(this.lat - obj.lat), Math.abs(this.lng - obj.lng));\n    return margin <= (maxMargin === undefined ? 1.0E-9 : maxMargin);\n  },\n  // @method toString(): String\n  // Returns a string representation of the point (for debugging purposes).\n  toString: function (precision) {\n    return 'LatLng(' + Util.formatNum(this.lat, precision) + ', ' + Util.formatNum(this.lng, precision) + ')';\n  },\n  // @method distanceTo(otherLatLng: LatLng): Number\n  // Returns the distance (in meters) to the given `LatLng` calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).\n  distanceTo: function (other) {\n    return Earth.distance(this, toLatLng(other));\n  },\n  // @method wrap(): LatLng\n  // Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees.\n  wrap: function () {\n    return Earth.wrapLatLng(this);\n  },\n  // @method toBounds(sizeInMeters: Number): LatLngBounds\n  // Returns a new `LatLngBounds` object in which each boundary is `sizeInMeters/2` meters apart from the `LatLng`.\n  toBounds: function (sizeInMeters) {\n    var latAccuracy = 180 * sizeInMeters / 40075017,\n      lngAccuracy = latAccuracy / Math.cos(Math.PI / 180 * this.lat);\n    return toLatLngBounds([this.lat - latAccuracy, this.lng - lngAccuracy], [this.lat + latAccuracy, this.lng + lngAccuracy]);\n  },\n  clone: function () {\n    return new LatLng(this.lat, this.lng, this.alt);\n  }\n};\n\n// @factory L.latLng(latitude: Number, longitude: Number, altitude?: Number): LatLng\n// Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude).\n\n// @alternative\n// @factory L.latLng(coords: Array): LatLng\n// Expects an array of the form `[Number, Number]` or `[Number, Number, Number]` instead.\n\n// @alternative\n// @factory L.latLng(coords: Object): LatLng\n// Expects an plain object of the form `{lat: Number, lng: Number}` or `{lat: Number, lng: Number, alt: Number}` instead.\n\nexport function toLatLng(a, b, c) {\n  if (a instanceof LatLng) {\n    return a;\n  }\n  if (Util.isArray(a) && typeof a[0] !== 'object') {\n    if (a.length === 3) {\n      return new LatLng(a[0], a[1], a[2]);\n    }\n    if (a.length === 2) {\n      return new LatLng(a[0], a[1]);\n    }\n    return null;\n  }\n  if (a === undefined || a === null) {\n    return a;\n  }\n  if (typeof a === 'object' && 'lat' in a) {\n    return new LatLng(a.lat, 'lng' in a ? a.lng : a.lon, a.alt);\n  }\n  if (b === undefined) {\n    return null;\n  }\n  return new LatLng(a, b, c);\n}","map":{"version":3,"names":["Util","Earth","toLatLngBounds","LatLng","lat","lng","alt","isNaN","Error","undefined","prototype","equals","obj","maxMargin","toLatLng","margin","Math","max","abs","toString","precision","formatNum","distanceTo","other","distance","wrap","wrapLatLng","toBounds","sizeInMeters","latAccuracy","lngAccuracy","cos","PI","clone","a","b","c","isArray","length","lon"],"sources":["C:/Users/aless/OneDrive/Área de Trabalho/Registro Ponto front-end GitHub/ReactProjects/my-app/node_modules/leaflet/src/geo/LatLng.js"],"sourcesContent":["import * as Util from '../core/Util';\r\nimport {Earth} from './crs/CRS.Earth';\r\nimport {toLatLngBounds} from './LatLngBounds';\r\n\r\n/* @class LatLng\r\n * @aka L.LatLng\r\n *\r\n * Represents a geographical point with a certain latitude and longitude.\r\n *\r\n * @example\r\n *\r\n * ```\r\n * var latlng = L.latLng(50.5, 30.5);\r\n * ```\r\n *\r\n * All Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:\r\n *\r\n * ```\r\n * map.panTo([50, 30]);\r\n * map.panTo({lon: 30, lat: 50});\r\n * map.panTo({lat: 50, lng: 30});\r\n * map.panTo(L.latLng(50, 30));\r\n * ```\r\n *\r\n * Note that `LatLng` does not inherit from Leaflet's `Class` object,\r\n * which means new classes can't inherit from it, and new methods\r\n * can't be added to it with the `include` function.\r\n */\r\n\r\nexport function LatLng(lat, lng, alt) {\r\n\tif (isNaN(lat) || isNaN(lng)) {\r\n\t\tthrow new Error('Invalid LatLng object: (' + lat + ', ' + lng + ')');\r\n\t}\r\n\r\n\t// @property lat: Number\r\n\t// Latitude in degrees\r\n\tthis.lat = +lat;\r\n\r\n\t// @property lng: Number\r\n\t// Longitude in degrees\r\n\tthis.lng = +lng;\r\n\r\n\t// @property alt: Number\r\n\t// Altitude in meters (optional)\r\n\tif (alt !== undefined) {\r\n\t\tthis.alt = +alt;\r\n\t}\r\n}\r\n\r\nLatLng.prototype = {\r\n\t// @method equals(otherLatLng: LatLng, maxMargin?: Number): Boolean\r\n\t// Returns `true` if the given `LatLng` point is at the same position (within a small margin of error). The margin of error can be overridden by setting `maxMargin` to a small number.\r\n\tequals: function (obj, maxMargin) {\r\n\t\tif (!obj) { return false; }\r\n\r\n\t\tobj = toLatLng(obj);\r\n\r\n\t\tvar margin = Math.max(\r\n\t\t        Math.abs(this.lat - obj.lat),\r\n\t\t        Math.abs(this.lng - obj.lng));\r\n\r\n\t\treturn margin <= (maxMargin === undefined ? 1.0E-9 : maxMargin);\r\n\t},\r\n\r\n\t// @method toString(): String\r\n\t// Returns a string representation of the point (for debugging purposes).\r\n\ttoString: function (precision) {\r\n\t\treturn 'LatLng(' +\r\n\t\t        Util.formatNum(this.lat, precision) + ', ' +\r\n\t\t        Util.formatNum(this.lng, precision) + ')';\r\n\t},\r\n\r\n\t// @method distanceTo(otherLatLng: LatLng): Number\r\n\t// Returns the distance (in meters) to the given `LatLng` calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).\r\n\tdistanceTo: function (other) {\r\n\t\treturn Earth.distance(this, toLatLng(other));\r\n\t},\r\n\r\n\t// @method wrap(): LatLng\r\n\t// Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees.\r\n\twrap: function () {\r\n\t\treturn Earth.wrapLatLng(this);\r\n\t},\r\n\r\n\t// @method toBounds(sizeInMeters: Number): LatLngBounds\r\n\t// Returns a new `LatLngBounds` object in which each boundary is `sizeInMeters/2` meters apart from the `LatLng`.\r\n\ttoBounds: function (sizeInMeters) {\r\n\t\tvar latAccuracy = 180 * sizeInMeters / 40075017,\r\n\t\t    lngAccuracy = latAccuracy / Math.cos((Math.PI / 180) * this.lat);\r\n\r\n\t\treturn toLatLngBounds(\r\n\t\t        [this.lat - latAccuracy, this.lng - lngAccuracy],\r\n\t\t        [this.lat + latAccuracy, this.lng + lngAccuracy]);\r\n\t},\r\n\r\n\tclone: function () {\r\n\t\treturn new LatLng(this.lat, this.lng, this.alt);\r\n\t}\r\n};\r\n\r\n\r\n\r\n// @factory L.latLng(latitude: Number, longitude: Number, altitude?: Number): LatLng\r\n// Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude).\r\n\r\n// @alternative\r\n// @factory L.latLng(coords: Array): LatLng\r\n// Expects an array of the form `[Number, Number]` or `[Number, Number, Number]` instead.\r\n\r\n// @alternative\r\n// @factory L.latLng(coords: Object): LatLng\r\n// Expects an plain object of the form `{lat: Number, lng: Number}` or `{lat: Number, lng: Number, alt: Number}` instead.\r\n\r\nexport function toLatLng(a, b, c) {\r\n\tif (a instanceof LatLng) {\r\n\t\treturn a;\r\n\t}\r\n\tif (Util.isArray(a) && typeof a[0] !== 'object') {\r\n\t\tif (a.length === 3) {\r\n\t\t\treturn new LatLng(a[0], a[1], a[2]);\r\n\t\t}\r\n\t\tif (a.length === 2) {\r\n\t\t\treturn new LatLng(a[0], a[1]);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tif (a === undefined || a === null) {\r\n\t\treturn a;\r\n\t}\r\n\tif (typeof a === 'object' && 'lat' in a) {\r\n\t\treturn new LatLng(a.lat, 'lng' in a ? a.lng : a.lon, a.alt);\r\n\t}\r\n\tif (b === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\treturn new LatLng(a, b, c);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}